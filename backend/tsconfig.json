// yarn tsc --init --rootDir src --outDir ./bin --esModuleInterop --lib ES2015 --module commonjs --noImplicitAny true
// - "--init" : tsconfig.json 파일을 생성합니다.
// - "--rootDir" : 소스 파일이 들어갈 루트 폴더 입니다.
// - "--outDir" : 컴파일된 파일이 들어갈 폴더 입니다.
// - "--esModuleInterop" : CommonJS 모듈을 import하기 쉽게 해줍니다.
// - "--lib" : 추가 라이브러리를 지정합니다.
// - "--module" : 프로그램의 모듈 시스템을 지정합니다. Node는CommonJS를 지원합니다.
// - "--noImplicitAny" : 암시적으로 any 타입으로 추론되면 에러를 발생시킵니다.

{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 프로젝트를 증분 컴파일할 수 있도록 .tsbuildinfo 파일을 저장합니다. */
    // "composite": true,                                /* TypeScript 프로젝트를 프로젝트 참조와 함께 사용할 수 있는 제약 조건을 활성화합니다. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo 증분 컴파일 파일의 경로를 지정합니다. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트를 참조할 때 선언 파일 대신 소스 파일을 선호하지 않도록 설정합니다. */
    // "disableSolutionSearching": true,                 /* 편집 시 다중 프로젝트 참조 검사에서 프로젝트를 선택합니다. */
    // "disableReferencedProjectLoad": true,             /* TypeScript에 의해 자동으로 로드되는 프로젝트 수를 줄입니다. */

    /* Language and Environment(언어와 환경) */
    "target": "es2016" /* 내보낸 자바스크립트에 대한 자바스크립트 언어 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. */,
    "lib": [
      "es6"
    ] /* 대상 런타임 환경을 설명하는 번들 라이브러리 선언 파일 집합을 지정합니다. */,
    // "jsx": "preserve",                                /* 생성되는 JSX 코드를 지정합니다. */
    // "experimentalDecorators": true,                   /* 레거시 실험 데코레이터에 대한 실험 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    /* 소스 파일의 장식된 선언에 대한 디자인 유형 메타데이터를 내보냅니다. */
    // "jsxFactory": "",                                 /* 반응 JSX 방출 대상으로 사용되는 JSX 공장 기능(예: 'React.createElement' 또는 'h')을 지정합니다. */
    // "jsxFragmentFactory": "",                         /* React.Fragment' 또는 'Fragment'와 같이 React JSX 방출을 대상으로 할 때 fragment에 사용되는 JSX Fragment 참조를 지정합니다. */
    // "jsxImportSource": "",                            /* jsx: react-jsx*'를 사용할 때 JSX 공장 기능을 가져오는 데 사용할 모듈 지정자를 지정합니다. */
    // "reactNamespace": "",                             /* 'createElement'에 대해 호출된 개체를 지정하십시오. 이는 JSX가 내보내는 '반응'을 대상으로 하는 경우에만 적용됩니다. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함한 라이브러리 파일을 포함하지 않도록 설정합니다. */
    // "useDefineForClassFields": true,                  /* ECMAscript-표준 준수 클래스 필드를 내보냅니다. */
    // "moduleDetection": "auto",                        /* 모듈 형식의 JS 파일을 탐지하는 데 사용되는 방법을 제어합니다. */

    /* Modules(모듈) */
    // "module": "commonjs" /* 생성되는 모듈 코드를 지정합니다. */,
    // "rootDir": "src" /* 소스 파일 내 루트 폴더를 지정합니다. */,
    // "moduleResolution": "node10",                     /* TypeScript가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  /* 상대적이지 않은 모듈 이름을 확인할 기본 디렉토리를 지정합니다. */
    // "paths": {},                                      /* 가져온 항목을 추가 조회 위치에 다시 매핑하는 항목 집합을 지정합니다. */
    // "rootDirs": [],                                   /* 모듈을 확인할 때 여러 폴더를 하나로 취급할 수 있도록 합니다. */
    // "typeRoots": [],                                  /* '.node_modules/@type'과 같은 역할을 하는 폴더를 여러 개 지정합니다. */
    // "types": [],                                      /* 원본 파일에서 참조되지 않고 포함할 유형 패키지 이름을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 글로벌에 액세스할 수 있도록 허용합니다. */
    // "moduleSuffixes": [],                             /* 모듈을 확인할 때 검색할 파일 이름 접미사 목록입니다. */
    // "allowImportingTsExtensions": true,               /* TypeScript 파일 확장명을 포함하도록 가져오기를 허용합니다. '--moduleResolution 번들러'와 '--noEmit' 또는 '--emitDeclarationOnly'를 설정해야 합니다. */
    // "resolvePackageJsonExports": true,                /* 패키지 가져오기를 확인할 때 package.json 'exports' 필드를 사용합니다. */
    // "resolvePackageJsonImports": true,                /* 가져오기를 확인할 때 package.json 'imports' 필드를 사용합니다. */
    // "customConditions": [],                           /* 가져오기를 확인할 때 확인자별 기본값 외에 설정할 조건. */
    // "resolveJsonModule": true,                        /* .json 파일을 가져오도록 설정합니다. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./bin" /* Specify an output folder for all emitted files. */,
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
